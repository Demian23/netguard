// generated by Fast Light User Interface Designer (fluid) version 1.0308

#include "gui.h"
#include "gui_engine.h"
#include "../../srcs/include/ip.h"
#include "../../srcs/include/port_scanner.h"
#include <cstdio>
#include <string>

NetGuardUserInterface::NetGuardUserInterface(Scheduler* a_sched) : schedule(a_sched) {
  { main_window = new Fl_Double_Window(1045, 791, "NetGuard");
    main_window->color(FL_DARK1);
    main_window->labelcolor((Fl_Color)1);
    main_window->callback(clbk_main_window, this);
    { tbs_main = new Fl_Tabs(15, 15, 1005, 750);
      tbs_main->labelsize(18);
      { grp_nodes = new Fl_Group(15, 40, 1000, 725, "Nodes");
        grp_nodes->labelsize(18);
        grp_nodes->hide();
        { brws_nodes = new Fl_Browser(40, 70, 210, 655, "Nodes list");
          brws_nodes->type(2);
          brws_nodes->labelsize(18);
          brws_nodes->textsize(18);
          brws_nodes->callback(clbk_nodes_brws, this);
        } // Fl_Browser* brws_nodes
        { grp_node_info = new Fl_Group(290, 70, 695, 655, "Node info");
          grp_node_info->box(FL_UP_BOX);
          grp_node_info->color((Fl_Color)42);
          grp_node_info->labelsize(18);
          grp_node_info->align(Fl_Align(FL_ALIGN_BOTTOM));
          { out_name = new Fl_Output(325, 100, 170, 40, "name");
            out_name->labelsize(18);
            out_name->textsize(18);
            out_name->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          } // Fl_Output* out_name
          { out_ip = new Fl_Output(325, 160, 170, 40, "ip");
            out_ip->labelsize(18);
            out_ip->textsize(18);
            out_ip->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          } // Fl_Output* out_ip
          { out_mac = new Fl_Output(325, 220, 170, 40, "mac");
            out_mac->labelsize(18);
            out_mac->textsize(18);
            out_mac->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          } // Fl_Output* out_mac
          { out_vendor = new Fl_Output(325, 280, 170, 40, "vendor");
            out_vendor->labelsize(18);
            out_vendor->textsize(18);
            out_vendor->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          } // Fl_Output* out_vendor
          { btn_ports_scan = new Fl_Button(615, 655, 100, 35, "scan ports");
            btn_ports_scan->labelsize(18);
            btn_ports_scan->callback(clbk_port_scan, this);
          } // Fl_Button* btn_ports_scan
          { brws_ports = new Fl_Check_Browser(325, 400, 170, 240, "choose ports to scan");
            brws_ports->type(2);
            brws_ports->labelsize(18);
            brws_ports->textsize(18);
            init_brws_ports(brws_ports);
          } // Fl_Check_Browser* brws_ports
          { ports_scan_progress = new Fl_Progress(570, 600, 380, 35, "scanning");
            ports_scan_progress->labelsize(18);
          } // Fl_Progress* ports_scan_progress
          { out_type = new Fl_Output(325, 340, 170, 40, "type");
            out_type->labelsize(18);
            out_type->textsize(18);
            out_type->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          } // Fl_Output* out_type
          { table = new PortsTable(570, 100, 380, 470, "Ports", schedule->manager);
            table->labelsize(18);
            table->end();
          } // Fl_Table* table_ports
          { btn_clean_ports_brws = new Fl_Button(415, 670, 80, 40, "clean all");
            btn_clean_ports_brws->labelsize(18);
            btn_clean_ports_brws->callback(clbk_clean_all, brws_ports);
          } // Fl_Button* btn_clean_ports_brws
          { btn_choos_all_ports = new Fl_Button(320, 670, 80, 40, "select all");
            btn_choos_all_ports->labelsize(18);
            btn_choos_all_ports->callback(clbk_select_all, brws_ports);
          } // Fl_Button* btn_choos_all_ports
        { btn_stop_ports_scan = new Fl_Button(810, 655, 100, 35, "stop scan");
          btn_stop_ports_scan->labelsize(18);
          btn_stop_ports_scan->callback(clbk_stop_port_scan, this);
        } // Fl_Button* btn_stop_ports_scan
          grp_node_info->end();
        } // Fl_Group* grp_node_info
        grp_nodes->end();
      } // Fl_Group* grp_nodes
      { grp_settings = new Fl_Group(20, 50, 1000, 710, "Settings");
        grp_settings->labelsize(18);
        { choice_interface = new Fl_Choice(55, 155, 160, 40, "interface");
          choice_interface->down_box(FL_BORDER_BOX);
          choice_interface->labelsize(18);
          choice_interface->textsize(18);
          choice_interface->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          choice_interface->callback(clbk_choice_interface, this);
          init_interface_choices(choice_interface);
        } // Fl_Choice* choice_interface
        { out_own_ip = new Fl_Output(275, 155, 160, 40, "ip");
          out_own_ip->labelsize(18);
          out_own_ip->textsize(18);
          out_own_ip->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_Output* out_own_ip
        { out_own_mask = new Fl_Output(275, 245, 160, 40, "mask");
          out_own_mask->labelsize(18);
          out_own_mask->textsize(18);
          out_own_mask->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_Output* out_own_mask
        { btn_scan = new Fl_Button(54, 595, 155, 40, "full scan");
          btn_scan->labelsize(18);
          btn_scan->callback(clbk_full_scan, this);
        } // Fl_Button* btn_scan
        { progress = new Fl_Progress(55, 515, 380, 40, "scan progress");
          progress->labelsize(18);
        } // Fl_Progress* progress
        { out_own_mac = new Fl_Output(275, 335, 160, 40, "mac");
          out_own_mac->labelsize(18);
          out_own_mac->textsize(18);
          out_own_mac->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_Output* out_own_mac
        { first_ip = new Fl_Input(55, 245, 160, 40, "first");
          first_ip->labelsize(18);
          first_ip->textsize(18);
          first_ip->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_Input* first_ip
        { last_ip = new Fl_Input(55, 335, 160, 40, "last");
          last_ip->labelsize(18);
          last_ip->textsize(18);
          last_ip->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_Input* last_ip
        { out_net = new Fl_Output(275, 425, 160, 40, "net");
          out_net->labelsize(18);
          out_net->textsize(18);
          out_net->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_Output* out_net
        { btn_active_mode = new Fl_Light_Button(55, 425, 160, 40, "active mode");
          btn_active_mode->labelsize(18);
          btn_active_mode->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
          btn_active_mode->callback(clbk_btn_active_mode, this);
        } // Fl_Light_Button* btn_active_mode
        { log_display = new Fl_Text_Display(500, 70, 500, 650, "Logs");
          log_display->labelsize(18);
          log_display->textsize(18);
          log_buffer = new Fl_Text_Buffer;
          log_display->buffer(log_buffer);
        } // Fl_Text_Display* log_display
        { btn_stop_full_scan = new Fl_Button(281, 595, 155, 40, "stop scan");
          btn_stop_full_scan->labelsize(18);
          btn_stop_full_scan->callback(clbk_stop_full_scan, this);
        } // Fl_Button* btn_stop_full_scan
        grp_settings->end();
      } // Fl_Group* grp_settings
      tbs_main->end();
    } // Fl_Tabs* tbs_main
    main_window->size_range(1030, 700, 1030, 700);
    main_window->end();
  } // Fl_Double_Window* main_window
}

void NetGuardUserInterface::show(){main_window->show();}

void NetGuardUserInterface::updateNodesBrowser()
{
    brws_nodes->clear();
    int i = 0;
    std::vector<std::string> sorted_ips = schedule->manager.GetSortedIps();
    for(auto& ip : sorted_ips){
        NetNode* node = schedule->manager.GetNodeByIp(ip);
        if(node && node->is_active)
            brws_nodes->insert(i, (ip + " (on)").c_str(), (void*)node);
        else
            brws_nodes->insert(i, (ip + " (off)").c_str(), (void*)node);

    }
}

void NetGuardUserInterface::updatePortsBrowser(const std::string& destination)
{
    std::vector<uint16_t> ports_sorted = schedule->manager.GetSortedPorts(destination);
    table->UpdateTable(destination, ports_sorted);
}
