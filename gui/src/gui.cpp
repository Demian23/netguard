// generated by Fast Light User Interface Designer (fluid) version 1.0308

#include "gui.h"
#include "gui_engine.h"

NetGuardUserInterface::NetGuardUserInterface(Scheduler* a_sched) : schedule(a_sched) {
  { main_window = new Fl_Double_Window(1030, 700, "NetGuard");
    main_window->color(FL_DARK1);
    main_window->labelcolor((Fl_Color)1);
    main_window->user_data((void*)(this));
    main_window->callback(clbk_main_window, this);
    { tbs_main = new Fl_Tabs(20, 25, 995, 645);
      tbs_main->labelsize(18);
      { grp_nodes = new Fl_Group(20, 55, 995, 615, "Nodes");
        grp_nodes->labelsize(18);
        { brws_nodes = new Fl_Browser(45, 80, 210, 550, "Nodes list");
          brws_nodes->type(2);
          brws_nodes->labelsize(18);
          brws_nodes->textsize(18);
        } // Fl_Browser* brws_nodes
        { grp_node_info = new Fl_Group(295, 80, 690, 550, "Node info");
          grp_node_info->box(FL_UP_BOX);
          grp_node_info->color((Fl_Color)42);
          grp_node_info->labelsize(18);
          grp_node_info->align(Fl_Align(FL_ALIGN_BOTTOM));
          { out_name = new Fl_Output(330, 110, 170, 40, "name");
            out_name->labelsize(18);
            out_name->textsize(18);
            out_name->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          } // Fl_Output* out_name
          { out_ip = new Fl_Output(330, 170, 170, 40, "ip");
            out_ip->labelsize(18);
            out_ip->textsize(18);
            out_ip->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          } // Fl_Output* out_ip
          { out_mac = new Fl_Output(330, 230, 170, 40, "mac");
            out_mac->labelsize(18);
            out_mac->textsize(18);
            out_mac->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          } // Fl_Output* out_mac
          { out_vendor = new Fl_Output(330, 290, 170, 40, "vendor");
            out_vendor->labelsize(18);
            out_vendor->textsize(18);
            out_vendor->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          } // Fl_Output* out_vendor
          { btn_is_active = new Fl_Light_Button(330, 350, 100, 30, "Active");
            btn_is_active->selection_color((Fl_Color)79);
            btn_is_active->labelsize(18);
            btn_is_active->when(3);
            btn_is_active->deactivate();
          } // Fl_Light_Button* btn_is_active
          { btn_ports_scan = new Fl_Button(330, 400, 100, 35, "scan ports");
            btn_ports_scan->labelsize(18);
          } // Fl_Button* btn_ports_scan
          { brws_ports = new Fl_Check_Browser(705, 111, 245, 478, "ports");
            brws_ports->type(2);
            brws_ports->labelsize(18);
            brws_ports->textsize(18);
          } // Fl_Check_Browser* brws_ports
          grp_node_info->end();
        } // Fl_Group* grp_node_info
        grp_nodes->end();
      } // Fl_Group* grp_nodes
      { grp_settings = new Fl_Group(20, 50, 995, 620, "Settings");
        grp_settings->labelsize(18);
        grp_settings->hide();
        { choice_interface = new Fl_Choice(100, 70, 120, 30, "interface");
          choice_interface->down_box(FL_BORDER_BOX);
          choice_interface->labelsize(18);
          choice_interface->textsize(18);
          choice_interface->callback(clbk_choice_interface, this);
          init_interface_choices(choice_interface);
        } // Fl_Choice* choice_interface
        { out_own_net = new Fl_Output(80, 130, 135, 30, "net");
          out_own_net->labelsize(18);
          out_own_net->textsize(18);
        } // Fl_Output* out_own_net
        { out_own_mask = new Fl_Output(80, 180, 135, 30, "mask");
          out_own_mask->labelsize(18);
          out_own_mask->textsize(18);
        } // Fl_Output* out_own_mask
        { btn_scan = new Fl_Button(80, 450, 155, 40, "full scan");
          btn_scan->labelsize(18);
          btn_scan->callback(clbk_full_scan, this);
        } // Fl_Button* btn_scan
        { progress = new Fl_Progress(80, 400, 300, 30, "scan progress");
          progress->labelsize(18);
        } // Fl_Progress* progress
        { out_own_mac = new Fl_Output(80, 230, 135, 30, "mac");
          out_own_mac->labelsize(18);
          out_own_mac->textsize(18);
        } // Fl_Output* out_own_mac
        grp_settings->end();
      } // Fl_Group* grp_settings
      tbs_main->end();
    } // Fl_Tabs* tbs_main
    main_window->size_range(1030, 700, 1030, 700);
    main_window->end();
  } // Fl_Double_Window* main_window
}

void NetGuardUserInterface::show(){main_window->show();}

void NetGuardUserInterface::updateNodesBrowser()
{
    const NetMap& map = schedule->manager.GetMap();
    brws_nodes->clear();
    for(NetMap::const_iterator it = map.begin(); it != map.end(); it++){
       brws_nodes->add(it->first.c_str()); 
    }
}
